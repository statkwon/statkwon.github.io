<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on ML LAB</title>
    <link>http://statkwon.github.io/tags/tree/</link>
    <description>Recent content in Tree on ML LAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://statkwon.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Random Forests</title>
      <link>http://statkwon.github.io/ml/random_forests/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://statkwon.github.io/ml/random_forests/</guid>
      <description>Bagging: 추정량의 분산을 줄이기 위한 방법 → DT와 같은 고분산 &amp;amp; 저편향 모형에 잘 작동함
Boosting: Committe of Weak Learners
Random Forests: Bagging의 수정 버전, De-Correlated Tree들의 평균
Random Forests Bagging에서 만들어지는 모든 tree들은 identically distributed → bias가 같음 → 분산을 줄이는 것만 가능
분산이 $\sigma^2$인 $B$개의 i.i.d. 확률변수들의 평균의 분산은 $\dfrac{1}{B}\sigma^2$이지만, pairwise correlation이 $\rho$인 i.d. $B$개의 확률변수들의 평균의 분산은 $\rho\sigma^2+\dfrac{1-\rho}{B}\sigma^2$이다.
Proof $\begin{aligned} \text{Var}\left(\dfrac{\sum_{i=1}^BX_i}{B}\right)&amp;=\dfrac{1}{B^2}\sum_{i=1}^B\text{Var}(X_i)+\dfrac{1}{B^2}\sum_{i\neq j}^B\text{Cov}(X_i, X_j) \\ &amp;=\dfrac{1}{B^2}\cdot B\sigma^2+\dfrac{1}{B^2}\cdot B(B-1)\sigma^2\rho \\ &amp;=\dfrac{\sigma^2}{B}+\dfrac{B-1}{B}\sigma^2\rho \\ &amp;=\rho\sigma^2+\dfrac{1-\rho}{B}\sigma^2 \end{aligned}$ $\rho$가 Bagging의 성능 개선(분산 감소)에 걸림돌이 됨 → &amp;lsquo;Tree들 간의 correlation을 줄여서 성능을 개선해보자!</description>
    </item>
    
    <item>
      <title>Gradient Boosting</title>
      <link>http://statkwon.github.io/ml/gradient_boosting/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://statkwon.github.io/ml/gradient_boosting/</guid>
      <description>Optimization Problem for Trees $\displaystyle T(x;\Theta)=\sum_{j=1}^J\gamma_jI(x\in R_j)$, where $\Theta=\{R_j, \gamma_j\}_1^J$
tree는 feature space를 $J$개의 disjoint한 영역 $R_j$로 분할한 뒤, 각 영역마다 부여된 값인 $\gamma_j$를 사용하여 예측을 하는 방식으로 동작한다.
하지만 다음과 같은 loss function을 최소화하는 parameter $\Theta$를 찾는 것은 쉽지 않다.
$\displaystyle \hat{\Theta}=\underset{\Theta}{\text{argmin}}\sum_{j=1}^J\sum_{x_i\in R_j}L(y_i, \gamma_j)$
따라서 최적화 문제를 다음과 같은 두 파트로 나누어 풀게 된다.
$R_j$를 안다는 전제 하에 $\gamma_j$를 찾는다. $R_j$를 찾는다. 1번은 쉽다. regression 문제의 경우 $\hat{\gamma}_j=\bar{y}_j$, classification 문제의 경우 $\hat{\gamma_j}=\underset{k}{\text{argmax}}\sum_iI(y_i=k)$가 된다.</description>
    </item>
    
    <item>
      <title>AdaBoost</title>
      <link>http://statkwon.github.io/ml/adaboost/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://statkwon.github.io/ml/adaboost/</guid>
      <description>AdaBoost.M1 AdaBoost의 초기 버전인 AdaBoost.M1은 $y\in\{-1, 1\}$의 binary classification 문제를 해결하기 위한 모델로 제안되었다. AdaBoost의 핵심 컨셉은 &amp;ldquo;weak classifier를 모아 powerful committee를 만들자&amp;quot;이다. 여기서 weak은 random guessing 보다 조금 나은 정도를 의미한다. (ex. stump, a tree with only 2 nodes)
Algorithm
Initialize the observation weights $w_i=1/N$, $i=1, 2, \ldots, N$. ➡ 첫 iteration에서는 각 데이터에 동등한 가중치를 적용한다. For $m=1$ to $M$: Fit a classifier $G_m(x)$ to the training data using weights $w_i$.</description>
    </item>
    
    <item>
      <title>Decision Trees</title>
      <link>http://statkwon.github.io/ml/decision_trees/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://statkwon.github.io/ml/decision_trees/</guid>
      <description>의사결정나무는 Feature Space를 여러 개의 영역으로 분할한 후, 각 영역의 종속변수를 어떤 상수나 범주로 예측하는 알고리즘이다. 이때 영역을 분할하는 방법으로 Recursive Binary Split을 사용한다. 의사결정나무와 관련된 여러 알고리즘이 있지만, 이 글에서는 그 중 가장 유명한 CART(Classification and Regression Tree) 알고리즘만을 다룰 것이다.
Regression Trees Squared Error Loss를 기준으로 하는 경우, Regression Tree의 식을 다음과 같이 표현할 수 있다.
$\displaystyle f(\mathbf{x})=\sum_{m=1}^Mc_mI(\mathbf{x}\in R_m)$, where $\hat{c}_m=\text{ave}(y_i\vert\mathbf{x}_i\in R_m)$
즉, Feature Space를 $M$개의 영역으로 나누고, 각 영역의 반응변수를 해당 영역에 속한 $y$값들의 평균으로 예측한다.</description>
    </item>
    
  </channel>
</rss>
